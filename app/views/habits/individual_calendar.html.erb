<div class="container mt-4" data-habit-id="<%= @habit.id %>">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1><%= @habit.title %> - カレンダー</h1>
    <div class="btn-group" role="group">
      <%= link_to "習慣詳細", @habit, class: "btn btn-primary" %>
      <%= link_to "習慣一覧", habits_path, class: "btn btn-primary" %>
    </div>
  </div>

  <div class="card">
    <div class="card-body">
      <div>
        <h6 class="mb-2">💡 使い方</h6>
        <p class="mb-0">カレンダーの日付をクリックして習慣の達成状況を記録できます。クリックするたびに「完了」と「未記録」が切り替わります。<br><small class="text-muted">※3日前までの日付のみクリック可能です</small></p>
      </div>

      <%= month_calendar(events: @habit_records, attribute: :recorded_at) do |date, records| %>
        <div class="calendar-date <%= 'completed-day' if records.any? %>" data-date="<%= date.strftime('%Y-%m-%d') %>" style="cursor: pointer; height: 100%;">
          <%= date.day %>

          <% if records.any? %>
            <div class="calendar-events mt-2">
              <% records.each do |record| %>
                <div class="calendar-event completed"
                     title="<%= @habit.title %> - 完了">
                  <span class="completion-check">✓</span>
                  <% if record.note.present? %>
                    <span class="text-muted" title="<%= record.note %>">📝</span>
                  <% end %>
                </div>
              <% end %>
            </div>
          <% else %>
            <div class="no-record-indicator" style="opacity: 0.5; font-size: 0.8em; margin-top: 4px;">
              未記録
            </div>
          <% end %>
        </div>
      <% end %>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">習慣情報</h5>
        </div>
        <div class="card-body">
          <h6><%= @habit.title %></h6>
          <% if @habit.description.present? %>
            <p class="text-muted small"><%= simple_format(@habit.description) %></p>
          <% end %>
          <% completion_rate = habit_completion_rate(@habit) %>
          <div class="mb-3">
            <strong>達成率: <%= completion_rate %>%</strong>
            <div class="progress mt-2">
              <div class="progress-bar <%= completion_rate >= 70 ? 'bg-success' : completion_rate >= 30 ? 'bg-warning' : 'bg-danger' %>"
                   style="width: <%= completion_rate %>%"></div>
            </div>
          </div>

          <div class="mb-2">
            <span class="badge bg-success">✓</span> 完了した日
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>

// Define the handler function globally to avoid multiple bindings
let calendarInitialized = false;

function handleDateClick(event) {
  const dateElement = event.currentTarget;
  const date = dateElement.dataset.date;
  const habitId = parseInt(dateElement.closest('[data-habit-id]')?.dataset.habitId || '<%= @habit.id %>');

  if (!date) {
    console.error('No date found on element:', dateElement);
    return;
  }

  const currentDate = new Date();
  currentDate.setHours(23, 59, 59, 999); // Set to end of day for comparison
  const selectedDate = new Date(date + 'T00:00:00'); // Ensure date is parsed as local time
  const threeDaysAgo = new Date();
  threeDaysAgo.setDate(currentDate.getDate() - 3);
  threeDaysAgo.setHours(0, 0, 0, 0); // Set to start of day for comparison

 console.log('Date clicked:', date, 'Selected:', selectedDate, 'Three days ago:', threeDaysAgo, 'Current:', currentDate);

  // Allow interaction with dates from 3 days ago up to today
  if (selectedDate >= threeDaysAgo && selectedDate <= currentDate) {
    toggleRecord(habitId, date, dateElement);
  } else {
    alert('3日前までの日付のみ記録可能です。');
  }
}

function toggleRecord(habitId, date, dateElement) {
  console.log('Toggling record for habit', habitId, 'on date', date);

  // Add loading state
  dateElement.style.opacity = '0.5';

  // Get CSRF token
  const csrfToken = document.querySelector('[name="csrf-token"]')?.content;
  if (!csrfToken) {
    console.error('CSRF token not found');
    alert('認証トークンが見つかりません。ページを再読み込みしてください。');
    dateElement.style.opacity = '1';
    return;
  }

  console.log('Making request to:', `/habits/${habitId}/toggle_record_for_date`);
  console.log('Request body:', { date: date });


  fetch(`/habits/${habitId}/toggle_record_for_date`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
      'Accept': 'application/json'
    },
    body: JSON.stringify({ date: date })
  })
  .then(response => {
    console.log('Response status:', response.status);
     console.log('Response headers:', response.headers);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    console.log('Response data:', data);
    if (data.success) {
      // Reload the page to show updated state and any badge notifications
      console.log('Success! Reloading page...');
      window.location.reload();
    } else {
      alert('記録の更新に失敗しました: ' + (data.error || '不明なエラー'));
      dateElement.style.opacity = '1';
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('記録の更新中にエラーが発生しました: ' + error.message);
    dateElement.style.opacity = '1';
  });
}

function initializeCalendar() {
  // Prevent multiple initializations
  if (calendarInitialized) {
    console.log('Calendar already initialized, skipping...');
    return;
  }

  const calendarDates = document.querySelectorAll('.calendar-date');

  console.log('Initializing calendar with', calendarDates.length, 'date elements');

  calendarDates.forEach(function(dateElement) {
    // Remove any existing listeners first
    dateElement.removeEventListener('click', handleDateClick);
    // Add the listener
    dateElement.addEventListener('click', handleDateClick);
  });

  calendarInitialized = true;
  console.log('Calendar initialization complete');
}

// Reset the flag when navigating away
function resetCalendarFlag() {
  calendarInitialized = false;
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', initializeCalendar);

// Handle Turbo navigation
document.addEventListener('turbo:load', function() {
  resetCalendarFlag();
  initializeCalendar();
});

document.addEventListener('turbo:before-visit', resetCalendarFlag);
</script>
